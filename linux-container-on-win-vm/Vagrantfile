# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

HOSTNAME = "windockergui"

$msg = <<MSG
------------------------------------------------------
GUI application runnning on Docker container
Container: GNU/Linux
Host: MS Windows 11

xfreerdp /u:vagrant  '/p:vagrant' "/v:127.0.0.1:53389" /w:1600 /h:900 /cert:ignore
vagrant ssh
vagrant powershell    # if you are on a Windows host

vagrant winrm --shell powershell --elevated --command 'systeminfo'
vagrant winrm --shell powershell --elevated --command 'systeminfo | find "System Type"'

------------------------------------------------------
MSG

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true
  end

 config.vm.post_up_message = $msg

 config.vm.define HOSTNAME do |srv|

    srv.vm.box = "gusztavvargadr/windows-11"

    # Use Windows Remote Management protocol (WinRM)
    srv.vm.communicator = "winrm"
    srv.vm.guest = :windows
    srv.winrm.username = "vagrant"
    srv.winrm.password = "vagrant"
    srv.winrm.execution_time_limit =  "PT2H"
    srv.winrm.timeout = 3600 # 60 minutes
    srv.winrm.retry_limit = 30
    srv.winrm.retry_delay = 10

    #srv.winrm.username = "Administrator"
    #srv.winrm.password = "Packer42"

    #srv.ssh.username = "Administrator"
    #srv.ssh.password = "Packer42"

    srv.vm.network "private_network", ip: "192.168.56.11", virtualbox__intnet: true
    srv.vm.box_check_update = false
    srv.ssh.forward_agent = true
    srv.ssh.forward_x11 = true
    srv.vm.hostname = HOSTNAME
    srv.vm.boot_timeout = 3600 # 60 minutes

    if Vagrant.has_plugin?("vagrant-hostmanager")
      srv.hostmanager.aliases = %W(#{HOSTNAME+".virtual.ballardini.com.ar"} #{HOSTNAME} )
    end

    srv.vm.provider :virtualbox do |vb|
      vb.gui = true
      vb.cpus = 2
      vb.memory = "6144"

      vb.customize ["modifyvm", :id, "--clipboard", "bidirectional"]
      vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
      vb.customize ["modifyvm", :id, "--paravirtprovider", "kvm"]
      #vb.customize ["setextradata", "global", "GUI/SuppressMessages", "all" ]
    end
  end

    ##
    # Aprovisionamiento
    #
    config.vm.provision "install_boxstarter", type: "shell", privileged: "true", inline: <<-'POWERSHELL'

      $box_uri = "https://boxstarter.org/bootstrapper.ps1"
      . { Invoke-WebRequest -useb $box_uri } | Invoke-Expression; Get-Boxstarter -Force

POWERSHELL

    config.vm.provision "copy_setup_files", type: "shell", privileged: "true", inline: <<-'POWERSHELL'
      # Copy setup[012].ps1 to the Temp directory and then run boxstarter with our setup[012].ps1 scripts

      #Set-PSDebug -Trace 1

      $env:PSModulePath = "$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'User'));$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'Machine'))"
      cp C:\vagrant\provision\0_choco_automate_windows_updates.ps1 $env:TEMP
      cp C:\vagrant\provision\0_setup_windows.ps1 $env:TEMP

      cp C:\vagrant\provision\1_setup_wsl2.ps1 $env:TEMP
      cp C:\vagrant\provision\2_setup_wsl2.ps1 $env:TEMP
      cp C:\vagrant\provision\3_setup_docker.ps1 $env:TEMP

      cp C:\vagrant\provision\4_choco_installs.ps1 $env:TEMP

POWERSHELL

    config.vm.provision "choco_automate_windows_updates", type: "shell", privileged: "true", inline: <<-'POWERSHELL'

      #Set-PSDebug -Trace 1

      $env:PSModulePath = "$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'User'));$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'Machine'))"
      Import-Module Boxstarter.Chocolatey
      $credential = New-Object System.Management.Automation.PSCredential("vagrant", (ConvertTo-SecureString "vagrant" -AsPlainText -Force))
      Install-BoxstarterPackage $env:TEMP\0_choco_automate_windows_updates.ps1 -Credential $credential
POWERSHELL

    config.vm.provision :reload

    config.vm.provision "run_0_setup_windows", type: "shell", privileged: "true", inline: <<-'POWERSHELL'

      #Set-PSDebug -Trace 1

      $env:PSModulePath = "$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'User'));$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'Machine'))"
      Import-Module Boxstarter.Chocolatey
      $credential = New-Object System.Management.Automation.PSCredential("vagrant", (ConvertTo-SecureString "vagrant" -AsPlainText -Force))
      Install-BoxstarterPackage $env:TEMP\0_setup_windows.ps1 -Credential $credential
POWERSHELL

    config.vm.provision "run_1_setup_wsl2", type: "shell", privileged: "true", inline: <<-'POWERSHELL'

      #Set-PSDebug -Trace 1

      $env:PSModulePath = "$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'User'));$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'Machine'))"
      Import-Module Boxstarter.Chocolatey
      $credential = New-Object System.Management.Automation.PSCredential("vagrant", (ConvertTo-SecureString "vagrant" -AsPlainText -Force))
      Install-BoxstarterPackage $env:TEMP\1_setup_wsl2.ps1 -Credential $credential
POWERSHELL

    config.vm.provision :reload

    config.vm.provision "run_2_setup_wsl2", type: "shell", privileged: "true", inline: <<-'POWERSHELL'

      #Set-PSDebug -Trace 1

      $env:PSModulePath = "$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'User'));$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'Machine'))"
      Import-Module Boxstarter.Chocolatey
      $credential = New-Object System.Management.Automation.PSCredential("vagrant", (ConvertTo-SecureString "vagrant" -AsPlainText -Force))
      Install-BoxstarterPackage $env:TEMP\2_setup_wsl2.ps1 -Credential $credential
POWERSHELL

    config.vm.provision "run_3_setup_docker", type: "shell", privileged: "true", inline: <<-'POWERSHELL'

      #Set-PSDebug -Trace 1

      $env:PSModulePath = "$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'User'));$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'Machine'))"
      Import-Module Boxstarter.Chocolatey
      $credential = New-Object System.Management.Automation.PSCredential("vagrant", (ConvertTo-SecureString "vagrant" -AsPlainText -Force))
      Install-BoxstarterPackage $env:TEMP\3_setup_docker.ps1 -Credential $credential
POWERSHELL

    config.vm.provision "run_choco_installs", type: "shell", privileged: "true", inline: <<-'POWERSHELL'

      #Set-PSDebug -Trace 1

      $env:PSModulePath = "$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'User'));$([System.Environment]::GetEnvironmentVariable('PSModulePath', 'Machine'))"
      Import-Module Boxstarter.Chocolatey
      $credential = New-Object System.Management.Automation.PSCredential("vagrant", (ConvertTo-SecureString "vagrant" -AsPlainText -Force))
      Install-BoxstarterPackage $env:TEMP\4_choco_installs.ps1 -Credential $credential
POWERSHELL


end
